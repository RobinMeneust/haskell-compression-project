{- |
  Module : Statistic.Source
  Description : Some utility functions for sources (input messages)
  Maintainer : ???
-}

module Statistic.Source(occurrences, entropy, orderedCounts) where

import qualified Data.Map as Map
import Data.List (sortBy)
import Data.Function (on)

-- | The map giving occurrences of each symbol in the source
--    It creates a mapping of elements to their occurrences in the input list using fromListWith.
--    It uses list comprehension to generate a list of key-value pairs where each element x in the input list is mapped to 1.
--    The fromListWith (+) function combines duplicate keys by summing their values.
occurrences :: Ord a => [a] -> Map.Map a Int
occurrences xs = Map.fromListWith (+) [(x, 1) | x <- xs]

-- | SHANNON entropy of source
--    It first calculates the occurrences using the occurrences function.
--    It computes the probabilities of each symbol occurrence.
--    It calculates Shannon entropy using the formula -p * logBase 2 p for each probability and sums them up.
entropy :: Ord a => [a] -> Double
entropy xs = sum [-p * logBase 2 p | p <- probabilities]
  where
    counts = occurrences xs
    totalCount = sum $ Map.elems counts
    probabilities = map (\(_, c) -> fromIntegral c / fromIntegral totalCount) $ Map.toList counts


-- | List of occurrences ordered by count
--    It utilizes toList to convert the map generated by occurrences into a list of key-value pairs.
--    It sorts the list of occurrences based on the counts in descending order using sortBy.
--    The flip compare with on snd ensures that sorting is done based on the second element of each tuple (i.e., the count).
orderedCounts :: Ord a => [a] -> [(a, Int)]
orderedCounts = sortBy (flip compare `on` snd) . Map.toList . occurrences
